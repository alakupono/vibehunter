// Prisma schema for Vibe Coding News Hub

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Source {
  id        String    @id @default(cuid())
  name      String
  url       String    @unique
  type      String    // rss | changelog | blog | twitter
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model Article {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  dek          String
  body         String
  tag          String
  url          String
  imageUrl     String?
  opinion      String?
  exercises    Json?
  implications String[]
  sourceId     String
  source       Source   @relation(fields: [sourceId], references: [id])
  publishedAt  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@index([publishedAt, id], map: "idx_article_published")
  @@index([tag, publishedAt], map: "idx_article_tag_published")
  // Relations for rewrite jobs
  rewriteJobsOriginal  RewriteJob[] @relation("OriginalArticle")
  rewriteJobsRewritten RewriteJob[] @relation("RewrittenArticle")
}

model Digest {
  id          String    @id @default(cuid())
  date        DateTime  @unique
  title       String
  summary     String
  articleIds  String[]
  createdAt   DateTime  @default(now())
}

model Tutorial {
  id               String       @id @default(cuid())
  slug             String       @unique
  title            String
  dek              String
  difficulty       String
  estimatedMinutes Int
  tags             String[]
  takeaways        String[]
  sourceUrls       String[]
  publishedAt      DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  steps            TutorialStep[]
  codeBlocks       CodeBlock[]
}

model TutorialStep {
  id          String   @id @default(cuid())
  order       Int
  title       String
  content     String
  tutorialId  String
  tutorial    Tutorial @relation(fields: [tutorialId], references: [id])
}

model CodeBlock {
  id          String   @id @default(cuid())
  order       Int
  language    String
  filename    String?
  content     String
  explanation String?
  tutorialId  String
  tutorial    Tutorial @relation(fields: [tutorialId], references: [id])
}

model PromptExample {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  prompt          String
  context         String?
  expectedOutcome String
  stack           String
  tags            String[]
  createdAt       DateTime @default(now())
}

model AffiliateLink {
  id        String   @id @default(cuid())
  domain    String   @unique
  url       String
  label     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RewriteJob {
  id                 String   @id @default(cuid())
  sourceUrl          String
  originalArticleId  String
  originalArticle    Article  @relation("OriginalArticle", fields: [originalArticleId], references: [id])
  rewrittenArticleId String?
  rewrittenArticle   Article? @relation("RewrittenArticle", fields: [rewrittenArticleId], references: [id])
  status             String   @default("pending") // pending|completed|failed
  error              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model CandidateSource {
  id            String    @id @default(cuid())
  name          String
  url           String    @unique
  tag           String
  type          String    // rss | atom | github-releases | sitemap
  evidence      String?
  score         Float     @default(0)
  status        String    @default("pending") // pending|approved|rejected|dead
  lastCheckedAt DateTime?
  createdAt     DateTime  @default(now())
  @@index([status, score], map: "idx_candidate_status_score")
}


